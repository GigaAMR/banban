//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "activities")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub body: Option<String>,
    pub column_id: Option<i32>,
    pub ordinal: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::columns::Entity",
        from = "Column::ColumnId",
        to = "super::columns::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Columns,
}

impl Related<super::columns::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Columns.def()
    }
}

impl Related<super::category_tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::activity_tags::Relation::CategoryTags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::activity_tags::Relation::Activities.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
